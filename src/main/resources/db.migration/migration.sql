INSERT INTO tests (name, local_date_time)
VALUES ('Java Core 1', current_date),
       ('Java Core 2', current_date),
       ('SQL Question', current_date),
       ('Spring Question', current_date),
       ('Hibernate Question', current_date);

INSERT INTO questions(question_name, question_test, correct_answer, incorrect_answer_one, incorrect_answer_two, incorrect_answer_three,test_id)
VALUES ('SQLQuestion','Какие операции входят в DDL?', 'ALTER', 'SELECT', 'DROP', 'DELETE',3),
    ('SQLQuestion','Какой оператор используется для определения диапазона значений?', 'BETWEEN', 'IN', 'LIKE', 'LIMIT',3),
    ('SQLQuestion','В каких случаях лучше использовать подзапросы?','Когда нужно вычислять агрегатные значения', 'Когда список выбора SELECT содержит столбцы более чем из одной таблицы', 'Всегда', 'Когда список выбора WHERE содержит столбцы более чем из одной таблицы',3),
    ('SQLQuestion','UPDATE Customers ... ContactName = ''Meder Tynychbekov'', City= ''Bishkek'' WHERE CustomerID = 1;', 'SET', 'PUT', 'INSERT', 'UPDATE',3),
    ('SQLQuestion','Для чего нужна денормализация базы данных?', 'Для повышения производительности и скорости извлечения данных', 'Для уменьшение потенциальной противоречивости хранимой в базе данных информации', 'Для создание каких-то временных промежуточных выборок из нескольких таблиц', 'Для хранения целого числа',3),
    ('SQLQuestion','Перечислите ограничения (constraints)?', 'CHECK', 'MIN', 'LIMIT', 'UNIQUE',3),
    ('SQLQuestion','Null в SQL это?', 'Равно на Null', 'Равно на false', 'Равно на Null!', 'Равно на false',3),
    ('SQLQuestion','Перечислите агрегатные функции...', 'COUNT', 'CONCAT', 'UNIQUE', 'DEFAULT',3),
    ('SQLQuestion','Какие операции входят в TCL?', 'COMMIT', 'SAVEPOINT', 'SELECT', 'TRUNCATE',3),
    ('SQLQuestion',' SELECT ^ ... Customers WHERE Country=''Germany'' ... City=''Berlin'';', 'FROM, AND', 'WHERE, LIKE', 'ALL, AND', 'FROM, LIKE',3),
    ('SQLQuestion','Что такое изолированность (isolation)?', 'Во время выполнения транзакции параллельные транзакции не должны оказывать влияние на ее результат', 'Независимо от проблем изменения, сделанные успешно завершённой транзакцией, должны остаться сохраненными после возвращения системы в работу', 'Транзакция, достигающая своего завершения и фиксирующая свои результаты, сохраняет согласованность базы данных', 'Гарантирует, что транзакция будет полностью выполнена или потерпит неудачу, где транзакция представляет одну логическую операцию данных',3),
    ('SQLQuestion','Можно сделать запрос из двух баз если они не на одном сервере?', 'НЕТ', 'ДА', 'НЕ ЗНАЮ', 'ПРЕДПОЛОГАЮ И ТО И ДРУГОЕ',3),
    ('SQLQuestion','... ^ FROM Customers;', 'SELECT', 'INSERT', 'TABLE', 'DROP',3),
    ('SQLQuestion','Что такое DISTINCT?', 'Указывает, что для вычислений используются только уникальные значения столбца', 'Ограничивает выборку заданным числом', 'Замещает последовательность любого числа символами', 'Позволяет осуществить слияние данных одной таблицы с данными другой таблицы',3),
    ('SQLQuestion','Какой из этих join ов является симметричными?', 'INNER JOIN', 'FULL JOIN', 'RIGHT JOIN', 'LEFT JOIN',3),
    ('SQLQuestion','Что такое LIMIT?', 'Ограничивает выборку заданным числом', 'Определяет диапазон значений', 'Указывает, что для вычислений используются только уникальные значения столбца', 'Определяет набор значений',3),
    ('SQLQuestion','Что такое долговечность (durability)?', 'Независимо от проблем изменения, сделанные успешно завершённой транзакцией, должны остаться сохраненными после возвращения системы в работу', 'Гарантирует, что транзакция будет полностью выполнена или потерпит неудачу, где транзакция представляет одну логическую операцию данных', 'Транзакция, достигающая своего завершения и фиксирующая свои результаты, сохраняет согласованность базы данных', 'Во время выполнения транзакции параллельные транзакции не должны оказывать влияние на ее результат',3),
    ('SQLQuestion','Какие операции входят в DCL?', 'REVOKE', 'COMMIT', 'ROLLBACK', 'DENY',3),
    ('SQLQuestion','Что такое шардирование база данных?', 'Это когда мы одну большую БД разделяем на много маленьких по какому-либо принципу', 'Честно, не знаю', 'Это когда мы объединяем много маленьких БД на одну большую БД', 'Все варианты',3),
    ('SQLQuestion','Что такое атомарность (atomocity)?', 'Гарантирует, что транзакция будет полностью выполнена или потерпит неудачу, где транзакция представляет одну логическую операцию данных', 'Транзакция, достигающая своего завершения и фиксирующая свои результаты, сохраняет согласованность базы данных', 'Во время выполнения транзакции параллельные транзакции не должны оказывать влияние на ее результат.', 'Независимо от проблем (к примеру, потеря питания, сбой или ошибки любого рода) изменения, сделанные успешно завершённой транзакцией, должны остаться сохраненными после возвращения системы в работу',3),
    ('SQLQuestion','При использовании UNION гарантирует порядок записей из двух таблиц?', 'Нет', 'Да', 'Всё', 'Честно не знаю',3),
    ('SQLQuestion','Что такое GROUP BY?', 'Cоздает отдельную группу для всех возможных значений', 'Указывает, что для вычислений используются только уникальные значения столбца', 'Упорядочивает вывод запроса согласно значениям в том или ином количестве выбранных столбцов', 'Применяется для объединения результатов двух SQL-запросов в единую таблицу',3),
    ('SQLQuestion','Как создается временная таблица?', 'CREATE TABLE #temporary_table', 'CREATE TABLE $temporary_table', 'CREATE TABLE %temporary_table', 'CREATE TABLE temporary_table#',3),
    ('SQLQuestion','После какого оператора нельзя будет восстановить данные?', 'TRUNCATE', 'DROP CASCADE', 'DELETE', 'ALTER',3),
    ('SQLQuestion','Какие операции входят в DML?', 'UPDATE', 'INSERT', 'TRUNCATE', 'COMMIT',3),
    ('SQLQuestion','Выберите не реляционные база данных...', 'MongoDB', 'PostgreSQL', 'Redis', 'MySQL',3),
    ('SQLQuestion','Какой оператор нельзя использовать вместе с агрегатными функциями?', 'WHERE', 'HAVING', 'GROUP BY', 'ORDER BY',3),
    ('SQLQuestion','Что такое ORDER BY?', 'Упорядочивает вывод запроса согласно значениям в том или ином количестве выбранных столбцов', 'Используется для агрегации записей результата по заданным атрибутам', 'Позволяет осуществить слияние данных одной таблицы с данными другой таблицы', 'Ограничивает выборку заданным числом',3),
    ('SQLQuestion','Какой метод настройки позволяет быстрее извлекать записи из таблицы?', 'INDEX', 'EXISTS', 'GRANT', 'SAVEPOINT',3),
    ('SQLQuestion','Что такое согласованность (consistency)?', 'Транзакция, достигающая своего завершения и фиксирующая свои результаты, сохраняет согласованность базы данных', 'Независимо от проблем изменения, сделанные успешно завершённой транзакцией, должны остаться сохраненными после возвращения системы в работу', 'Гарантирует, что транзакция будет полностью выполнена или потерпит неудачу, где транзакция представляет одну логическую операцию данных','Во время выполнения транзакции параллельные транзакции не должны оказывать влияние на ее результат',3),


    ('JavaCoreOne','Выберите методы класса Object?', 'clone()','intern()','add()','toString()',1),
    ('JavaCoreOne','Какие недостатки есть у Enum ?','К ним не применимы операторы >, <, >=, <=','Не можем проверить тип данных','Не можем определять методы для отдельных констант','Честно не знаю',1),
    ('JavaCoreOne','Могут ли у разных объектов быть одинаковые hashCode()?', 'Да','Нет','Честно,не знаю','нет правильного ответа',1),
    ('JavaCoreOne','Выберите ссылочный типы данных?', 'String', 'char','boolean','int',1),
    ('JavaCoreOne','К abstract-классам можно применить модификатор final?','Нет','Да','Честно не знаю','нет правильного ответа',1),
    ('JavaCoreOne','Какие недостатки у ООП?', 'Снижает производительность - многие вещи технически реализованы иначе, поэтому они используют больше ресурсов','Сложность реализации большого функционала - т.к. на написание кода уходит больше времени','Трудно читается - нужно выискивать в коде функции и выяснять, за что они отвечают','нет правильного ответа',1),
    ('JavaCoreOne','Внутри вложенного класса (Nested class) мы можем объявить перечисления (Enum)?','Нет','Да','нет правильного ответа','честно не знаю',1),
    ('JavaCoreOne','Какие преимущества у java?','Автоматическое управление памятью','многословный код','Развитые инструменты по созданию GUI приложений на чистой java','нет правильного ответа',1),
    ('JavaCoreOne','За счет чего обеспечивается кроссплатформенность?','JVM','Операционная система','Security Manager','Многопоточность',1),
    ('JavaCoreOne','Что такое хешкод (hashcode)?','Это целочисленный результат работы метода, которому в качестве входного параметра передан объект','Это базовый класс для всех остальных объектов в Java','Это механизм исследования данных о программе во время её выполнения','Это метод, определенный в Object, который служит для сравнения объектов',1),
    ('JavaCoreOne','Класс может быть объявлен с модификатором доступа ...?','public','private','default','protected',1),
    ('JavaCoreOne','Что такое ООП?','методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования','методология программирования, подход заключающийся отказе от использования глобальных данных и оператора безусловного перехода, разработке модулей с сильной связностью и обеспечении их независимости от других модулей','методология программирования, основанная на представлении программы в виде совокупность правил или логических высказываний','методология программирования, при котором вся программа разбивается на группу компонентов, называемых модулями, причем каждый из них имеет свой контролируемый размер, четкое назначение и детально проработанный интерфейс с внешней средой',1),
    ('JavaCoreOne','Что такое инкапсуляция?','Свойство системы, которое объединяет данные и методы, манипулирующие этими данными, а также защищает и то, и другое от внешнего вмешательства или неправильного использования','Свойство системы, которое позволяет описать новый класс на основе уже существующего с частично или полностью заимствованной функциональностью','Предоставляет возможность единообразно обрабатывать объекты с различной реализацией при условии наличия у них общего интерфейса или класса','Это более конкретизированные отношения между объектами',1),
    ('JavaCoreOne','Может ли быть абстрактный класс без абстрактных методов?','Да','Нет','Честно не знаю','нет правильного ответа',1),
    ('JavaCoreOne','Какое исключения проверяются компилятором на этапе компиляции?','Checked','Unchecked','Честно, не знаю','нет правильного ответа',1),
    ('JavaCoreOne','Могут ли классы быть статическими?','Да','Нет','Честно, не знаю','нет правильного ответа',1),
    ('JavaCoreOne','Что такое полиморфизм?', 'Предоставляет возможность единообразно обрабатывать объекты с различной реализацией при условии наличия у них общего интерфейса или класса','Свойство системы, которое позволяет описать новый класс на основе уже существующего с частично или полностью заимствованной функциональностью','Это процесс скрытия деталей реализации от пользователя, предоставляя ему только функционал','Свойство системы, которое объединяет данные и методы, манипулирующие этими данными, а также защищает и то, и другое от внешнего вмешательства или неправильного использования',1),
    ('JavaCoreOne','Какие бывают блоки инициализации?','Нестатические блоки инициализации','Динамические блоки инициализации','Статические блоки инициализации','Нединамические блоки инициализации',1),
    ('JavaCoreOne','Interface Segregation Principle?','Много специализированных интерфейсов лучше, чем один общий','Абстракции не должны зависеть от деталей, детали должны зависеть от абстракций','Объекты в программе можно заменить их наследниками без изменения свойств программы','Один общий интерфейс лучше, чем много специализированных интерфейсов',1),
    ('JavaCoreOne','Single Responsibility Principle?','Каждый класс выполняет лишь одну задачу','Зависимость на интерфейсах','Отношение когда один объект является частью другого','Зависимость на абстракциях',1),
    ('JavaCoreOne','Локальные классы (Local Inner Class) могут объявлены как public?','Нет','Да','нет правильного ответа','не знаю',1),
    ('JavaCoreOne','Может ли один блок catch отлавливать сразу несколько исключений?','Да','Нет','Честно, не знаю','нет правильного ответа',1),
    ('JavaCoreOne','Можно ли использовать строки в конструкции switch?','Да','Нет','Честно, не знаю','нет правильного ответа',1),
    ('JavaCoreOne','Какой из перечисленных вариантов будет отличным кандидатом для ключа в HashMap?','String','StringBuffer','StringBuilder','нет правильного ответа',1),
    ('JavaCoreOne','Что такое сигнатура метода?','Это имя метода + параметры','Это имя метода + возвращаемое значение','Это имя метода + параметры + возвращаемое значение','Это имя метода + параметры + возвращаемое значение + бросаемые им исключения',1),
    ('JavaCoreOne','Какая основная идея языка?','Написано однажды - работает везде','Написано сегодня - работает завтра','Написано всеми - работает везде','Написано однажды - работает однажды',1),
    ('JavaCoreOne','Какие преимущества у ООП?','Быстро пишется - можно быстро создать сущности, с которыми должна работать программа','На старт уходит меньше времени','Меньше повторений кода - не нужно писать однотипные функции для разных сущностей','Используют меньше ресурсов',1),
    ('JavaCoreOne','Какой метод используем для того чтобы поместить объект в String pool?','intern()','toString()','concat()','join()',1),
    ('JavaCoreOne','Что такое наследование?','Свойство системы, которое позволяет описать новый класс на основе уже существующего с частично или полностью заимствованной функциональностью','Это объединение данных и методов работы с этими данными в одной упаковке','Это отношение когда один объект является частью другого','Это более конкретизированные отношения между объектами',1),
    ('JavaCoreOne','Dependency Inversion Principle?','Зависимость на абстракциях','Загружает классы расширений, которые по умолчанию находятся в каталоге jre/lib/ext','Объекты в программе можно заменить их наследниками без изменения свойств программы','Преобразует символические ссылки из типа в прямые ссылки',1),
    ('JavaCoreOne','В каком порядке следует обрабатывать исключения в catch блоках?','От наследника к предку','От предка к наследнику', 'Порядок не важен','Error должно обрабатываться первым',1),
    ('JavaCoreOne','Что такое int pool?','Числа в промежутке [-128; 127]','Числа в промежутке [-127; 128]','Числа в промежутке [127; -128]','Числа в промежутке [128; -127]',1),
    ('JavaCoreOne','Какой класс или интерфейс стоить на самом вверху иерархии исключений?','Throwable','Exception','Error','RuntimeException',1),
    ('JavaCoreOne','Какой память используется всем приложением?','Heap','Stack','нет правильного ответа','честно не знаю',1),
    ('JavaCoreOne','Какое связывание необходимо для реализации полиморфизма?','Позднее (late binding)','Ранее (early binding)','нет правильного ответа','честно не знаю',1),
    ('JavaCoreOne','Что будет, если переопределить equals() не переопределяя hashCode()?','Нарушится контракт, классы и методы, которые использовали правила этого контракта могут некорректно работать','Нечего не будет, программа будет работать корректно','Нарушится контракт но классы и методы, которые использовали правила этого контракта могут работать корректно','Честно, не знаю',1),
    ('JavaCoreOne','Liskov’s Substitution Principle?','Объекты в программе можно заменить их наследниками без изменения свойств программы','Много специализированных интерфейсов лучше, чем один общий','Каждый класс выполняет лишь одну задачу','Абстракции не должны зависеть от деталей, детали должны зависеть от абстракций',1),
    ('JavaCoreOne','Когда выйдет OutOfMemoryError?','Если heap память будет заполнена','Если stack память будет заполнена','Если metaspace пространство будет заполнена','Если все выше перечисленные памяти будет заполнена',1),
    ('JavaCoreOne','Где хранятся stack и heap памяти?', 'JDK','HDD','SSD','RAM',1),
    ('JavaCoreOne','Open Closed Principle?','Программные сущности открыты для расширения и закрыты для модификации','Объекты в программе можно заменить их наследниками без изменения свойств программы','Зависимость на абстракциях','Много специализированных интерфейсов лучше, чем один общий',1),


    ('JavaCoreTwo','Что будет, если мы кладем в HashMap ключ, у которого equals и hashCode определены некорректно?', 'Объект скорее всего добавится , но обратно мы не сможем получить его', 'Объект добавится без проблем', 'Вызовет RunTime Exception', 'Объект не добавится',2),
    ('JavaCoreTwo',' Какой метод преобразует поток в список?','collect()', 'count()', 'toArray()', 'concat()',2),
    ('JavaCoreTwo','Чем можно заменить лямбда-выражение?', 'Анонимный класс', 'Стрим', 'Локальный класс', 'Функциональный интерфейс',2),
    ('JavaCoreTwo','Начальная емкость (default capacity) LinkedList?', '0', '11', '10', '16',2),
    ('JavaCoreTwo','При итерации по ArrayList что будет если удалить элемент?' , 'Ничего не будет' , 'Будет IllegalStateException','Будет ClassCastException' , 'Будет ConcurrentModificationException',2),
    ('JavaCoreTwo','Выберите методы Map появившегося в Java 8?' , 'compute()' , 'allMatch()' , 'findFirst' , 'keySet()',2) ,
    ('JavaCoreTwo','Какой из этих функциональных интерфейсов реализует функцию, получающая на вход два экземпляра класса T и возвращающая на выходе экземпляр класса T?' ,'BinaryOperator' , 'Supplier' , 'Function' , 'Predicate',2) ,
    ('JavaCoreTwo','Почему Map не Collection?' , 'Совокупность пар ключ и значение' , 'Совокупность ключей' , 'Совокупность всех элементов' , 'Совокупность значений',2) ,
    ('JavaCoreTwo','Какие нововведения появились в Java 8?' , 'Дефолтные методы в интерфейсах' , 'Дженерики' , 'Абстракные методы' ,'честно, не знаю',2) ,
    ('JavaCoreTwo','Какой класс с самым полным объемом информации о временном контексте в календарной системе ISO-8601?' , 'ZonedDataTime' , 'LocalDataTime','DataTime' , 'LocalDate',2) ,
    ('JavaCoreTwo','В какой версии java появились дженерики?' , '5' , '1' , '8' , '15',2),
    ('JavaCoreTwo','Можно ли создать стрим из коллекции?' , 'да' , 'нет' , 'честно, не знаю','не всегда',2),
    ('JavaCoreTwo','Если мы объявили wildcard с extends?' , 'То это producer' , 'То это consumer' , 'То это function' , 'То это predicate',2),
    ('JavaCoreTwo','Выберите терминальные методы в стримах ...' , 'findAny()' , 'map()' , 'peak()' , 'честно, не знаю',2),
    ('JavaCoreTwo','Что рекомендуется использовать вместо устаревшего Stack?' , 'Deque' , 'Queue' , 'Vector' , 'LinkedList',2),
    ('JavaCoreTwo','Какая коллекция реализует LIFO?' , 'Vector' , 'LinkedList' , 'Queue' , 'честно, не знаю',2),
    ('JavaCoreTwo','Что такое стрим?','Последовательность элементов, над которой можно производить различные операции','Это позволяет нам ссылаться на конструкторы или методы, не выполняя их','Коллекция, предназначен для хранения элементов в порядке, нужном для их обработки','Упрощённая запись анонимного класса, реализующего функциональный интерфейс',2),
    ('JavaCoreTwo','Выберите промежуточные методы стрима...' , 'peek()' , 'trim()' , 'concat()' , 'reduce()',2) ,
    ('JavaCoreTwo','Что делает trimToSize()?' , 'Сжимает массив' , 'Удаляет массив' , 'Расширяет массив' , 'Определяет размер массива',2) ,
    ('JavaCoreTwo','Про интерфейс List?' , 'Хранит элементы в порядке добавления' , 'честно, не знаю' , 'Хранит элементы не сохраняя порядок' , 'Хранит уникальные элементы',2) ,
    ('JavaCoreTwo','Что такое дженерики?' , 'Параметризованные типы' , 'Это типы без указания типа в фигурных скобках' , 'Сырые типы' , 'Неопределенные типы',2) ,
    ('JavaCoreTwo','C помощью Enumeration можно добавлять/удалять элементы?' , 'да' , 'нет' ,'частично', 'честно, не знаю',2) ,
    ('JavaCoreTwo','Где присутствует Enumeration?' , 'Vector' , 'ArrayList' , 'LinkedList' , 'TreeMap',2) ,
    ('JavaCoreTwo','Начальная емкость (default capacity) LinkedHashSet?' , '16' , '10' , '11' , '0',2) ,
    ('JavaCoreTwo','При реализации Queue нужно переопределять equals() и hashcode()?' , 'нет' , 'да','частично','честно, не знаю',2) ,
    ('JavaCoreTwo','Начальная емкость (default capacity) ArrayList?' , '10' , '16' , '11' , '0',2) ,
    ('JavaCoreTwo','У функциональных интерфейсов могут быть другие не абстрактные методы?' , 'да' , 'нет' ,'частично', 'честно, не знаю',2) ,
    ('JavaCoreTwo','Про интерфейс Set?' , 'Хранит уникальные элементы' , 'Хранит дублированные элементы' , 'Хранит элементы в порядке добавления','хранится ссылки на следующий/предыдующий узел и значение',2) ,
    ('JavaCoreTwo','Пример для итератора fail-fast?' , 'Vector' , 'Hashset' , 'ArrayDeque' , 'TreeSet',2) ,
    ('JavaCoreTwo','Какие методы бывают у стрима?' , 'Промежуточные' , 'Прямоугольные' , 'Термостатные' , 'честно, не знаю',2) ,
    ('JavaCoreTwo','Из какого интерфейса реализуются все коллекции по иерархии?' , 'Iterable' , 'Throwable' , 'Collection' , 'Map',2) ,
    ('JavaCoreTwo','Какой класс мы используем для кодирования/декодирования данных?' , 'Base64' , 'Encoding' , 'Decoding' , 'ASCII',2) ,
    ('JavaCoreTwo','Что такое ссылка на метод?' , 'Это сокращенный синтаксис выражения лямбда' , 'Это сокращенный синтаксис выражения стримов' , 'Это сокращенный синтаксис выражения массива' ,'Это сокращенный синтаксис выражения переменной',2) ,
    ('JavaCoreTwo','Какой класс используем во избежание NullPointerException?' , 'Optionals' , 'Object' , 'Collectors' , 'NotNull',2) ,
    ('JavaCoreTwo','Какая коллекция применяет красное/черное дерево?' , 'TreeSet' , 'LinkedList' , 'HashMap' , 'Hashset',2) ,
    ('JavaCoreTwo','Какие существует реализации Map?' , 'HashSet' , 'TreeMap' , 'HashTable' , 'LinkedHashSet',2) ,
    ('JavaCoreTwo','Какой промежуточный метод возвращает новый поток, пропуская первые n элементов' , 'skip(n)' , 'limit(n)' , 'sorted(n)' , 'distinct(n)',2) ,
    ('JavaCoreTwo','Какие классы внутренне поддерживаются реализациями Map?' , 'Реализующие интерфейс Set' , 'Реализующие интерфейс List' , 'Реализующие интерфейс Queue' , 'Реализующие интерфейс Collection',2) ,
    ('JavaCoreTwo','Как устроена HashMap?' , 'Внутри состоит из корзин и списка элементов, на которые ссылаются корзины' , 'Представляет отображение в виде дерева' , 'В его основе лежит LinkedHashMap','честно, не знаю',2) ,
    ('JavaCoreTwo','java.util.Collection это?' , 'Корневой интерфейс JСF' , 'Класс содержит исключительно нестатические методы для работы с коллекциями' , 'Класс содержит исключительно статические методы для работы с коллекциями','Корневой интерфейс Java',2);


-- VALUES ('Чем можно заменить лямбда-выражение?', 'Анонимный класс', 'Stream API', 'Локальный класс',
--         'Функциональный интерфейс'),
--        ('Начальная емкость (default capacity) LinkedList?', '0', '10', '11', '16'),
--        ('При итерации по ArrayList что будет если удалить элемент?', 'Будет ConcurrentModificationException',
--         'Ничего не будет', 'Будет IllegalStateException', 'Будет ClassCastException'),
--        ('Какой из этих функциональных интерфейсов реализует функцию, получающая на вход два экземпляра класса T и возвращающая на выходе экземпляр класса T',
--         'BinaryOperator', 'Supplier', 'Function', 'Predicate'),
--        ('Почему Map не Collection?', 'Совокупность пар ключ и значение', 'Совокупность ключей ',
--         'Совокупность всех элементов',
--         'Совокупность значений'),
--        ('Какой класс с самым полным объемом информации о временном контексте в календарной системе ISO-8601?',
--         'ZonedDateTime',
--         'LocalDate', 'DateTime', 'LocalDateTime'),
--        ('В какой версии Java появились дженерики?', '5', '1', '8', '15'),
--        ('Можно ли создать стрим из коллекции?', 'Да', 'Нет', 'Даже не знаю', 'Вопрос не правильно'),
--        ('Если мы объявили wildcard с extends?', 'То это producer', 'То это predicate', 'То это consumer',
--         'То это function'),
--        ('Что рекомендуется использовать вместо устаревшего Stack?', 'Deque', 'Queue', 'Vector', 'LinkedList'),
--        ('Что такое стрим(Stream API)?',
--         'Последовательность элементов, над которой можно производить различные операции',
--         'Это позволяет нам ссылаться на конструкторы или методы, не выполняя их',
--         'Коллекция, предназначен для хранения элементов в порядке, нужном для их обработки',
--         'Упрощённая запись анонимного класса, реализующего функциональный интерфейс'),
--        ('Что делает trimToSize()?', 'Сжимает массив', 'Определяет размер массива', 'Расширяет массив',
--         'Удаляет массив'),
--        ('Что такое Generic?', 'Параметризованные типы', 'Сырые типы', 'Это типы без указания типа в фигурных скобках',
--         'Неопределенные типы'),
--        ('Начальная емкость (default capacity) LinkedHashSet?', '16', '0', '12', '10'),
--        ('Начальная емкость (default capacity) ArrayList?', '10', '16', '11', '0'),
--        ('У функциональных интерфейсов могут быть другие не абстрактные методы?', 'Да', 'Нет', 'И то и другое',
--         'Не знаю'),
--        ('Из какого интерфейса реализуются все коллекции по иерархии?', 'Iterable', 'Collection', 'Throwable', 'Map'),
--        ('Что такое ссылка на метод (method references)?', 'Это сокращенный синтаксис выражения лямбда',
--         'Это сокращенный синтаксис выражения стримов', 'Это сокращенный синтаксис выражения переменной',
--         'Это сокращенный синтаксис выражения массива'),
--        ('Какой класс используем  во избежание NullPointerException?', 'Optional', 'Collectors', 'NotNull', 'Object'),
--        ('Какая коллекция применяет красное/черное дерево?', 'TreeSet', 'LinkedList', 'HashMap', 'HashSet');
